
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.12

#include <stan/model/model_header.hpp>

namespace model_ouija_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model_ouija : public prob_grad {
private:
    int N;
    int G;
    vector<vector_d> Y;
    vector<double> k_means;
    vector<double> k_sd;
    vector<double> t0_means;
    vector<double> t0_sd;
    double student_df;
public:
    model_ouija(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model_ouija(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_ouija_namespace::model_ouija";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "G", "int", context__.to_vec());
        G = int(0);
        vals_i__ = context__.vals_i("G");
        pos__ = 0;
        G = vals_i__[pos__++];
        validate_non_negative_index("Y", "G", G);
        validate_non_negative_index("Y", "N", N);
        Y = std::vector<vector_d>(G,vector_d(static_cast<Eigen::VectorXd::Index>(N)));
        context__.validate_dims("data initialization", "Y", "vector_d", context__.to_vec(G,N));
        vals_r__ = context__.vals_r("Y");
        pos__ = 0;
        size_t Y_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < Y_i_vec_lim__; ++i_vec__) {
            size_t Y_limit_0__ = G;
            for (size_t i_0__ = 0; i_0__ < Y_limit_0__; ++i_0__) {
                Y[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "k_means", "double", context__.to_vec(G));
        validate_non_negative_index("k_means", "G", G);
        k_means = std::vector<double>(G,double(0));
        vals_r__ = context__.vals_r("k_means");
        pos__ = 0;
        size_t k_means_limit_0__ = G;
        for (size_t i_0__ = 0; i_0__ < k_means_limit_0__; ++i_0__) {
            k_means[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "k_sd", "double", context__.to_vec(G));
        validate_non_negative_index("k_sd", "G", G);
        k_sd = std::vector<double>(G,double(0));
        vals_r__ = context__.vals_r("k_sd");
        pos__ = 0;
        size_t k_sd_limit_0__ = G;
        for (size_t i_0__ = 0; i_0__ < k_sd_limit_0__; ++i_0__) {
            k_sd[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "t0_means", "double", context__.to_vec(G));
        validate_non_negative_index("t0_means", "G", G);
        t0_means = std::vector<double>(G,double(0));
        vals_r__ = context__.vals_r("t0_means");
        pos__ = 0;
        size_t t0_means_limit_0__ = G;
        for (size_t i_0__ = 0; i_0__ < t0_means_limit_0__; ++i_0__) {
            t0_means[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "t0_sd", "double", context__.to_vec(G));
        validate_non_negative_index("t0_sd", "G", G);
        t0_sd = std::vector<double>(G,double(0));
        vals_r__ = context__.vals_r("t0_sd");
        pos__ = 0;
        size_t t0_sd_limit_0__ = G;
        for (size_t i_0__ = 0; i_0__ < t0_sd_limit_0__; ++i_0__) {
            t0_sd[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "student_df", "double", context__.to_vec());
        student_df = double(0);
        vals_r__ = context__.vals_r("student_df");
        pos__ = 0;
        student_df = vals_r__[pos__++];

        // validate data
        check_greater_or_equal(function__,"N",N,2);
        check_greater_or_equal(function__,"G",G,2);
        for (int k0__ = 0; k0__ < G; ++k0__) {
            check_greater_or_equal(function__,"Y[k0__]",Y[k0__],0);
        }

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += G;
        ++num_params_r__;
        num_params_r__ += G;
        num_params_r__ += G;
        ++num_params_r__;
        num_params_r__ += N;
        num_params_r__ += 2;
    }

    ~model_ouija() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("mu0")))
            throw std::runtime_error("variable mu0 missing");
        vals_r__ = context__.vals_r("mu0");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu0", "double", context__.to_vec(G));
        std::vector<double> mu0(G,double(0));
        for (int i0__ = 0U; i0__ < G; ++i0__)
            mu0[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < G; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,mu0[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu0: ") + e.what());
        }

        if (!(context__.contains_r("phi")))
            throw std::runtime_error("variable phi missing");
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,phi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable phi: ") + e.what());
        }

        if (!(context__.contains_r("k")))
            throw std::runtime_error("variable k missing");
        vals_r__ = context__.vals_r("k");
        pos__ = 0U;
        context__.validate_dims("initialization", "k", "double", context__.to_vec(G));
        std::vector<double> k(G,double(0));
        for (int i0__ = 0U; i0__ < G; ++i0__)
            k[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < G; ++i0__)
            try {
            writer__.scalar_unconstrain(k[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable k: ") + e.what());
        }

        if (!(context__.contains_r("t0")))
            throw std::runtime_error("variable t0 missing");
        vals_r__ = context__.vals_r("t0");
        pos__ = 0U;
        context__.validate_dims("initialization", "t0", "double", context__.to_vec(G));
        std::vector<double> t0(G,double(0));
        for (int i0__ = 0U; i0__ < G; ++i0__)
            t0[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < G; ++i0__)
            try {
            writer__.scalar_unconstrain(t0[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable t0: ") + e.what());
        }

        if (!(context__.contains_r("mu_hyper")))
            throw std::runtime_error("variable mu_hyper missing");
        vals_r__ = context__.vals_r("mu_hyper");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_hyper", "double", context__.to_vec());
        double mu_hyper(0);
        mu_hyper = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,mu_hyper);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_hyper: ") + e.what());
        }

        if (!(context__.contains_r("t")))
            throw std::runtime_error("variable t missing");
        vals_r__ = context__.vals_r("t");
        pos__ = 0U;
        context__.validate_dims("initialization", "t", "double", context__.to_vec(N));
        std::vector<double> t(N,double(0));
        for (int i0__ = 0U; i0__ < N; ++i0__)
            t[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N; ++i0__)
            try {
            writer__.scalar_lub_unconstrain(0,1,t[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable t: ") + e.what());
        }

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta", "double", context__.to_vec(2));
        std::vector<double> beta(2,double(0));
        for (int i0__ = 0U; i0__ < 2; ++i0__)
            beta[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < 2; ++i0__)
            try {
            writer__.scalar_unconstrain(beta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<T__> mu0;
        size_t dim_mu0_0__ = G;
        mu0.reserve(dim_mu0_0__);
        for (size_t k_0__ = 0; k_0__ < dim_mu0_0__; ++k_0__) {
            if (jacobian__)
                mu0.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                mu0.push_back(in__.scalar_lb_constrain(0));
        }

        T__ phi;
        (void) phi;  // dummy to suppress unused var warning
        if (jacobian__)
            phi = in__.scalar_lb_constrain(0,lp__);
        else
            phi = in__.scalar_lb_constrain(0);

        vector<T__> k;
        size_t dim_k_0__ = G;
        k.reserve(dim_k_0__);
        for (size_t k_0__ = 0; k_0__ < dim_k_0__; ++k_0__) {
            if (jacobian__)
                k.push_back(in__.scalar_constrain(lp__));
            else
                k.push_back(in__.scalar_constrain());
        }

        vector<T__> t0;
        size_t dim_t0_0__ = G;
        t0.reserve(dim_t0_0__);
        for (size_t k_0__ = 0; k_0__ < dim_t0_0__; ++k_0__) {
            if (jacobian__)
                t0.push_back(in__.scalar_constrain(lp__));
            else
                t0.push_back(in__.scalar_constrain());
        }

        T__ mu_hyper;
        (void) mu_hyper;  // dummy to suppress unused var warning
        if (jacobian__)
            mu_hyper = in__.scalar_lb_constrain(0,lp__);
        else
            mu_hyper = in__.scalar_lb_constrain(0);

        vector<T__> t;
        size_t dim_t_0__ = N;
        t.reserve(dim_t_0__);
        for (size_t k_0__ = 0; k_0__ < dim_t_0__; ++k_0__) {
            if (jacobian__)
                t.push_back(in__.scalar_lub_constrain(0,1,lp__));
            else
                t.push_back(in__.scalar_lub_constrain(0,1));
        }

        vector<T__> beta;
        size_t dim_beta_0__ = 2;
        beta.reserve(dim_beta_0__);
        for (size_t k_0__ = 0; k_0__ < dim_beta_0__; ++k_0__) {
            if (jacobian__)
                beta.push_back(in__.scalar_constrain(lp__));
            else
                beta.push_back(in__.scalar_constrain());
        }


        // transformed parameters
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > mu(G, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(N))));
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > ysd(G, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(N))));

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(mu,DUMMY_VAR__);
        stan::math::fill(ysd,DUMMY_VAR__);

        try {
            for (int g = 1; g <= G; ++g) {
                for (int i = 1; i <= N; ++i) {
                    stan::math::assign(get_base1_lhs(get_base1_lhs(mu,g,"mu",1),i,"mu",2), ((2 * get_base1(mu0,g,"mu0",1)) / (1 + exp((-(get_base1(k,g,"k",1)) * (get_base1(t,i,"t",1) - get_base1(t0,g,"t0",1)))))));
                    stan::math::assign(get_base1_lhs(get_base1_lhs(ysd,g,"ysd",1),i,"ysd",2), sqrt((((1 + phi) * get_base1(get_base1(mu,g,"mu",1),i,"mu",2)) + 0.01)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < G; ++i0__) {
            for (int i1__ = 0; i1__ < N; ++i1__) {
                if (stan::math::is_uninitialized(mu[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < G; ++i0__) {
            for (int i1__ = 0; i1__ < N; ++i1__) {
                if (stan::math::is_uninitialized(ysd[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: ysd" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        for (int k0__ = 0; k0__ < G; ++k0__) {
            check_greater_or_equal(function__,"ysd[k0__]",ysd[k0__],0);
        }

        // model body
        try {
            lp_accum__.add(normal_log<propto__>(k, k_means, k_sd));
            lp_accum__.add(normal_log<propto__>(t0, t0_means, t0_sd));
            lp_accum__.add(gamma_log<propto__>(mu0, (mu_hyper / 2), 0.5));
            lp_accum__.add(gamma_log<propto__>(phi, 12, 4));
            lp_accum__.add(normal_log<propto__>(t, 0.5, 1));
            lp_accum__.add(normal_log<propto__>(beta, 0, 0.10000000000000001));
            for (int g = 1; g <= G; ++g) {
                for (int i = 1; i <= N; ++i) {
                    if (as_bool(logical_eq(get_base1(get_base1(Y,g,"Y",1),i,"Y",2),0))) {
                        lp_accum__.add(log_sum_exp(bernoulli_logit_log(1,(get_base1(beta,1,"beta",1) + (get_base1(beta,2,"beta",1) * get_base1(get_base1(mu,g,"mu",1),i,"mu",2)))),(bernoulli_logit_log(0,(get_base1(beta,1,"beta",1) + (get_base1(beta,2,"beta",1) * get_base1(get_base1(mu,g,"mu",1),i,"mu",2)))) + student_t_log(get_base1(get_base1(Y,g,"Y",1),i,"Y",2),student_df,get_base1(get_base1(mu,g,"mu",1),i,"mu",2),get_base1(get_base1(ysd,g,"ysd",1),i,"ysd",2)))));
                    } else {
                        lp_accum__.add((bernoulli_logit_log(0,(get_base1(beta,1,"beta",1) + (get_base1(beta,2,"beta",1) * get_base1(get_base1(mu,g,"mu",1),i,"mu",2)))) + student_t_log(get_base1(get_base1(Y,g,"Y",1),i,"Y",2),student_df,get_base1(get_base1(mu,g,"mu",1),i,"mu",2),get_base1(get_base1(ysd,g,"ysd",1),i,"ysd",2))));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu0");
        names__.push_back("phi");
        names__.push_back("k");
        names__.push_back("t0");
        names__.push_back("mu_hyper");
        names__.push_back("t");
        names__.push_back("beta");
        names__.push_back("mu");
        names__.push_back("ysd");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_ouija_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<double> mu0;
        size_t dim_mu0_0__ = G;
        for (size_t k_0__ = 0; k_0__ < dim_mu0_0__; ++k_0__) {
            mu0.push_back(in__.scalar_lb_constrain(0));
        }
        double phi = in__.scalar_lb_constrain(0);
        vector<double> k;
        size_t dim_k_0__ = G;
        for (size_t k_0__ = 0; k_0__ < dim_k_0__; ++k_0__) {
            k.push_back(in__.scalar_constrain());
        }
        vector<double> t0;
        size_t dim_t0_0__ = G;
        for (size_t k_0__ = 0; k_0__ < dim_t0_0__; ++k_0__) {
            t0.push_back(in__.scalar_constrain());
        }
        double mu_hyper = in__.scalar_lb_constrain(0);
        vector<double> t;
        size_t dim_t_0__ = N;
        for (size_t k_0__ = 0; k_0__ < dim_t_0__; ++k_0__) {
            t.push_back(in__.scalar_lub_constrain(0,1));
        }
        vector<double> beta;
        size_t dim_beta_0__ = 2;
        for (size_t k_0__ = 0; k_0__ < dim_beta_0__; ++k_0__) {
            beta.push_back(in__.scalar_constrain());
        }
        for (int k_0__ = 0; k_0__ < G; ++k_0__) {
            vars__.push_back(mu0[k_0__]);
        }
        vars__.push_back(phi);
        for (int k_0__ = 0; k_0__ < G; ++k_0__) {
            vars__.push_back(k[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < G; ++k_0__) {
            vars__.push_back(t0[k_0__]);
        }
        vars__.push_back(mu_hyper);
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(t[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
            vars__.push_back(beta[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        vector<vector_d> mu(G, (vector_d(static_cast<Eigen::VectorXd::Index>(N))));
        vector<vector_d> ysd(G, (vector_d(static_cast<Eigen::VectorXd::Index>(N))));

        try {
            for (int g = 1; g <= G; ++g) {
                for (int i = 1; i <= N; ++i) {
                    stan::math::assign(get_base1_lhs(get_base1_lhs(mu,g,"mu",1),i,"mu",2), ((2 * get_base1(mu0,g,"mu0",1)) / (1 + exp((-(get_base1(k,g,"k",1)) * (get_base1(t,i,"t",1) - get_base1(t0,g,"t0",1)))))));
                    stan::math::assign(get_base1_lhs(get_base1_lhs(ysd,g,"ysd",1),i,"ysd",2), sqrt((((1 + phi) * get_base1(get_base1(mu,g,"mu",1),i,"mu",2)) + 0.01)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int k0__ = 0; k0__ < G; ++k0__) {
            check_greater_or_equal(function__,"ysd[k0__]",ysd[k0__],0);
        }

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < N; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(mu[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < N; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(ysd[k_0__][k_1__]);
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_ouija";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "k" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_hyper";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ysd" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "k" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_hyper";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ysd" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }

}; // model

} // namespace




#endif
